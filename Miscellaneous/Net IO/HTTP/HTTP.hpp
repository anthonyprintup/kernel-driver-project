#pragma once

#include <Framework/Utilities/Strings/Fnv1A.hpp>

namespace http {
	enum struct RequestMethod {
		UNKNOWN,
		CONNECT,
		DELETE_,
		GET,
		HEAD,
		OPTIONS,
		PATCH,
		POST,
		PUT,
		TRACE
	};
	enum struct HeaderType {
		UNKNOWN,
		ACCEPT_CH,
		ACCEPT_CHARSET,
		ACCEPT_ENCODING,
		ACCEPT_LANGUAGE,
		ACCEPT_PATCH,
		ACCEPT_POST,
		ACCEPT_RANGES,
		ACCEPT,
		ACCESS_CONTROL_ALLOW_CREDENTIALS,
		ACCESS_CONTROL_ALLOW_HEADERS,
		ACCESS_CONTROL_ALLOW_METHODS,
		ACCESS_CONTROL_ALLOW_ORIGIN,
		ACCESS_CONTROL_EXPOSE_HEADERS,
		ACCESS_CONTROL_MAX_AGE,
		ACCESS_CONTROL_REQUEST_HEADERS,
		ACCESS_CONTROL_REQUEST_METHOD,
		AGE,
		ALLOW,
		ALT_SVC,
		AUTHORIZATION,
		CACHE_CONTROL,
		CLEAR_SITE_DATA,
		CONNECTION,
		CONTENT_DISPOSITION,
		CONTENT_ENCODING,
		CONTENT_LANGUAGE,
		CONTENT_LENGTH,
		CONTENT_LOCATION,
		CONTENT_RANGE,
		CONTENT_SECURITY_POLICY_REPORT_ONLY,
		CONTENT_SECURITY_POLICY,
		CONTENT_TYPE,
		COOKIE,
		CROSS_ORIGIN_EMBEDDER_POLICY,
		CROSS_ORIGIN_OPENER_POLICY,
		CROSS_ORIGIN_RESOURCE_POLICY,
		DATE,
		DEVICE_MEMORY,
		DIGEST,
		DNT,
		DOWNLINK,
		EARLY_DATA,
		ECT,
		ETAG,
		EXPECT_CT,
		EXPECT,
		EXPIRES,
		FEATURE_POLICY,
		FORWARDED,
		FROM,
		HOST,
		IF_MATCH,
		IF_MODIFIED_SINCE,
		IF_NONE_MATCH,
		IF_RANGE,
		IF_UNMODIFIED_SINCE,
		KEEP_ALIVE,
		LARGE_ALLOCATION,
		LAST_MODIFIED,
		LINK,
		LOCATION,
		NEL,
		ORIGIN,
		PROXY_AUTHENTICATE,
		PROXY_AUTHORIZATION,
		RANGE,
		REFERER,
		REFERRER_POLICY,
		RETRY_AFTER,
		RTT,
		SAVE_DATA,
		SEC_FETCH_DEST,
		SEC_FETCH_MODE,
		SEC_FETCH_SITE,
		SEC_FETCH_USER,
		SEC_WEBSOCKET_ACCEPT,
		SERVER_TIMING,
		SERVER,
		SET_COOKIE,
		SOURCEMAP,
		STRICT_TRANSPORT_SECURITY,
		TE,
		TIMING_ALLOW_ORIGIN,
		TK,
		TRAILER,
		TRANSFER_ENCODING,
		UPGRADE_INSECURE_REQUESTS,
		UPGRADE,
		USER_AGENT,
		VARY,
		VIA,
		WANT_DIGEST,
		WARNING,
		WWW_AUTHENTICATE,
		X_CONTENT_TYPE_OPTIONS,
		X_DNS_PREFETCH_CONTROL,
		X_FORWARDED_FOR,
		X_FORWARDED_HOST,
		X_FORWARDED_PROTO,
		X_FRAME_OPTIONS,
		X_XSS_PROTECTION
	};
	enum struct StatusCode {
		// Informational Responses
		CONTINUE = 100,
		SWITCHING_PROTOCOL,
		PROCESSING,
		EARLY_HINTS,

		// Successful Responses
		OK = 200,
		CREATED,
		ACCEPTED,
		NON_AUTHORITATIVE_INFORMATION,
		NO_CONTENT,
		RESET_CONTENT,
		PARTIAL_CONTENT,
		MULTI_STATUS,
		ALREADY_REPORTED,
		IM_USED = 226,

		// Redirects
		MULTI_CHOICE = 300,
		MOVED_PERMANENTLY,
		FOUND,
		SEE_OTHER,
		NOT_MODIFIED,
		USE_PROXY,
		UNUSED,
		TEMPORARY_REDIRECT,
		PERMANENT_REDIRECT,

		// Client Errors
		BAD_REQUEST = 400,
		UNAUTHORIZED,
		PAYMENT_REQUIRED,
		FORBIDDEN,
		NOT_FOUND,
		METHOD_NOT_ALLOWED,
		NOT_ACCEPTABLE,
		PROXY_AUTHENTICATION_REQUIRED,
		REQUEST_TIMEOUT,
		CONFLICT,
		GONE,
		LENGTH_REQUIRED,
		PRECONDITION_FAILED,
		PAYLOAD_TOO_LARGE,
		URI_TOO_LONG,
		UNSUPPORTED_MEDIA_TYPE,
		RANGE_NOT_SATISFIABLE,
		EXPECTATION_FAILED,
		IM_A_TEAPOT,
		MISDIRECT_REQUEST = 421,
		UNPROCESSABLE_ENTITY,
		LOCKED,
		FAILED_DEPENDENCY,
		TOO_EARLY,
		UPGRADE_REQUIRED,
		PRECONDITION_REQUIRED = 428,
		TOO_MANY_REQUESTS,
		REQUEST_HEADER_FIELDS_TOO_LARGE = 431,
		UNAVAILABLE_FOR_LEGAL_REASONS = 451,

		// Server Errors
		INTERNAL_SERVER_ERROR = 500,
		NOT_IMPLEMENTED,
		BAD_GATEWAY,
		SERVICE_UNAVAILABLE,
		GATEWAY_TIMEOUT,
		HTTP_VERSION_NOT_SUPPORTED,
		VARIANT_ALSO_NEGOTIATES,
		INSUFFICIENT_STORAGE,
		LOOP_DETECTED,
		NOT_EXTENDED = 510,
		NETWORK_AUTHENTICATION_REQUIRED
	};

	struct Header {
		HeaderType  header {};
		std::string value {};

		Header(HeaderType header, std::string_view value);
	};

	Framework::Utilities::Strings::Fnv1A::Hash toHash(HeaderType header) noexcept;
	HeaderType fromHash(Framework::Utilities::Strings::Fnv1A::Hash hash) noexcept;

	std::pair<std::string_view, std::string_view> parseUri(std::string_view uri) noexcept;
}
